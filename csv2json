#!/usr/bin/env python
# encoding: utf-8
"""A simple wrapper script for converting CSV formatted data to JSON.

The script reads CSV formatted data and outputs it into an JSON array 
of objects. By default the values in the first row of the CSV data will
be used as fieldnames.

Usage:
    csv2json [OPTION..] [FILE]

Options:    
    -o, --outfile=OUTFILE        write output to OUTFILE
    -h, --help                   show this help message and exit
    -f, --fieldnames FIELDNAMES  comma separated list of field names,
                                 if omitted the first row of FILE will
                                 be used as fieldnames
    -i, --indent INDENT          integer specifying indent level for 
                                 pretty-printing, if zero or negative
                                 only newlines will be inserted
    -e, --encoding ENCODING      use specified ENCODING [default UTF-8]

Examples:
    csv2json < in.csv > out.json
    csv2json -o out.json in.csv

"""
import csv
import json
import sys
from optparse import OptionParser

def main():
    """Handles command line option parsing and csv2json procedure invocation."""
    usage = "usage: %prog [OPTION...] [FILE]"
    parser = OptionParser(usage)

    parser.add_option('-o', '--outfile',
                      dest='outfile',
                      help='write output to OUTFILE')

    parser.add_option('-f', '--fieldnames',
                      dest='fieldnames',
                      help="comma separated list of field names, if omitted "
                           "the first row of FILE will be used as fieldnames")

    parser.add_option('-i', '--indent',
                      dest='indent',
                      default=None,
                      type='int',
                      help="integer specifying indent level for "
                           "pretty-printing, if zero or negative only newlines "
                           "will be inserted")

    parser.add_option('-e', '--encoding',
                      dest='encoding',
                      default='UTF-8',
                      help="use specified ENCODING [default %default]")

    (options, args) = parser.parse_args()

    try:
        infile = open(args[0], 'r') if args else sys.stdin
        
        outfile = (open(options.outfile, 'w') 
            if options.outfile is not None else sys.stdout)
        
        fieldnames = (options.fieldnames.split(',') 
            if options.fieldnames is not None else None)

        csv2json(infile, outfile, fieldnames, options.indent, options.encoding)
    
    except IOError as error:
        parser.error("I/O error(%s): %s: %s" % 
                     (error.errno, args[0], error.strerror))
    
    finally:
        if infile:
            infile.close()
        if outfile:
            outfile.close()

def csv2json(infile, outfile, fieldnames=None, indent=None, encoding='UTF-8'):
    """Converts CSV formatted data to JSON.
    
    Reads CSV formatted data from infile and writes JSON formatted data
    to outfile.

    Args:
        infile:     Open file Input CSV file.
        outfile:    Output JSON file.
        fieldnames: List of CSV field names. If omitted the first row
                    of infile will be used as fieldnames.
        indent:     Integer specifying indent level for pretty-printing.
                    If zero or negative only newlines will be inserted. 
                    None (the default) disables pretty-printing.
        encoding:   Infile encoding, default is UTF-8.

    Returns:
        None

    Raises:
        IOError: If infile cannot be read or outfile cannot be written to.
        csv.Error: If the CSV data cannot be parsed.

    """
    reader = csv.DictReader(infile, fieldnames=fieldnames)
    json.dump([row for row in reader], fp=outfile,
              indent=indent, encoding=encoding)

if __name__ == '__main__':
    main()
